/*global Backbone:false, $:false, _:false, JST:false, App:false, window:false */

var SprintStory = Backbone.Model.extend({
  initialize: function() {
    if (!App.Collections.SprintStoryStatuses) {
      // load up Sprint Story Status collection if not already loaded, should be generated by view that needs it such as Backlog#show
      App.Collections.SprintStoryStatuses = new SprintStoryStatusesCollection();
      App.Collections.SprintStoryStatuses.fetch();
    }

    // when changes occur to sprint story, relay the changes to the story model
    //  so that we can update the view
    // This is needed when status is changed and we need to update the view accordingly in the Backlog
    var changesCallback = function(model) {
      if (this.Story()) {
        this.Story().set({ sprint_story_status_id: this.get('sprint_story_status_id'), sprint_story_id: this.get('id') });
      }
    };
    this.on('change', changesCallback);
    this.on('add', changesCallback);

    this.on('remove', function(model) {
      if (this.Story()) {
        // set to minus one instead of null as not used for anything other than tracking changes and null returns false
        this.Story().set({ sprint_story_status_id: -1, sprint_story_id: -1 });
      }
    });
  },

  Sprint: function() {
    return this.collection.sprint;
  },

  Story: function() {
    var that = this;
    if (!this._story) {
      var theme = this.Sprint().Backlog().Themes().get(this.get('theme_id'));
      if (!theme) {
        // theme_id may not have been cached from the server due to delay in network comms, so let's just find the slow way
        this.Sprint().Backlog().Themes().each(function(theme) {
          if (!that._story) {
            var story = theme.Stories().get(that.get('story_id'));
            if (story) {
              that._story = story;
            }
          }
        });
      } else {
        this._story = theme.Stories().get(this.get('story_id'));
      }
      if (!this._story) {
        throw "Data inconsistency error, story " + this.get('story_id') + " does not exist";
      }
    }
    return this._story;
  },

  // sprint story status shortcut, depends on App.Collections.SprintStoryStatuses being initialized
  Status: function() {
    return App.Collections.SprintStoryStatuses.get(this.get('sprint_story_status_id'));
  }
});